package pertemuan_13;
import java.util.Scanner;
/**
 *
 * @author Win10
 */
        public class Pertemuan_13 {
        static void swap(int[] arr, int i, int j)
        {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
        static void printArray(int[] arr){
        for(int i=0; i<arr.length; i++){
        System.out.print(arr[i] + " ");
        }
        }
            static int partition(int[] arr, int low, int high)
            {
            int pivot = arr[high];
            int i = (low - 1);
            for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivot) {
 
            i++;
            swap(arr, i, j);
            }
            }
            swap(arr, i + 1, high);
            return (i + 1);
            }
 
        static void quickSort(int[] arr, int low, int high)
        {
        if (low < high) {
 
        int pi = partition(arr, low, high);
 
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
        }
        }
        static void merge(int arr[], int l, int m, int r)
        {
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[] = new int[n1];
        int R[] = new int[n2];
 
        for (int i = 0; i < n1; ++i)
        L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
        R[j] = arr[m + 1 + j];
 
        int i = 0, j = 0;
 
        int k = l;
        while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
        arr[k] = L[i];
        i++;
        }
        else {
        arr[k] = R[j];
        j++;
        }
        k++;
        }
        
        while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
        }
 
        while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
        }
        }
 
 static void sort(int arr[], int l, int r)
 {
 if (l < r) {
 
 int m = l + (r - l) / 2;
 
 sort(arr, l, m);
 sort(arr, m + 1, r);
 
 merge(arr, l, m, r);
 }
 }
 static void bubbleSort(int[] arr){
 for(int i=0; i<arr.length;i++){
 for(int j=1; j < arr.length;j++){
 if(arr[j-1]>arr[j]){
 int tampung=arr[j-1];
 arr[j-1] = arr[j];
 arr[j]=tampung;
 }
 }
 }
 }
 static void selectionSort(int[] arr){
 for(int i=0;i<arr.length-1;i++){
 int min = i;
 for(int j=i+1; j<arr.length; j++){
 if(arr[j] < arr[min]){
 min = j;
 }
 }
 int simpan = arr[i];
 arr[i] = arr[min];
 arr[min] = simpan;
 }
 }
 static void insertionSort(int[] arr){
 for(int d=1; d<arr.length;d++){
 int k = arr[d];
 int i = d-1;
 while(i>=0 && arr[i]>k){
 arr[i+1] =arr[i];
 i = i-1;
 }
 arr[i+1] = k;
 }
}
 /**
 * @param args the command line arguments
 */
 public static void main(String[] args) {
 Scanner input = new Scanner(System.in);
 System.out.print("Masukan Jumlah Angka: ");
 int jumlah = input.nextInt();
 int[] arr = new int[jumlah];
 for(int i=0; i < jumlah; i++){
 System.out.print("Masukan angka ke-"+(i + 1)+": ");
 arr[i] = input.nextInt();
 }
 System.out.println("Pilihlah algoritma yang kalian inginkan: ");
 System.out.println("1. Bubble Sort");
 System.out.println("2. Selection Sort");
 System.out.println("3. Insertion Sort");
 System.out.println("4. Merge");
 System.out.println("5. Quick Sort");
 System.out.print("Masukan Pilihan: ");
 int pilihan = input.nextInt();
 switch (pilihan){
 case 1:
 bubbleSort(arr);
 System.out.println("Hasil Pengurutan Bubble Sort:");
 printArray(arr);
 break;
 case 2:
 selectionSort(arr);
 System.out.println("Hasil Pengurutan Selection Sort:");
 printArray(arr);
 break;
 case 3:
 insertionSort(arr);
 System.out.println("Hasil Pengurutan Insertion Sort:");
 printArray(arr);
 break;
 case 4:
 sort(arr, 0 , arr.length - 1);
 System.out.println("Hasil Pengurutan Merge Sort:");
 printArray(arr);
 break;
 case 5:
 quickSort(arr, 0, arr.length-1);
 System.out.println("Hasil Pengurutan Quick Sort: ");
 printArray(arr);
 break;
 }
 }
}
